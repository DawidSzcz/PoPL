#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 867 0 23 3 1 #"("
0 0 15 3 6 #"module"
0 0 23 3 1 #" "
0 0 14 3 6 #"interp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"lib"
0 0 23 3 1 #" "
0 0 19 3 9 #"\"eopl.ss\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"eopl\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 19 3 19 #"\"drscheme-init.scm\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 19 3 10 #"\"lang.scm\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 19 3 21 #"\"data-structures.scm\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 19 3 18 #"\"environments.scm\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 16 #"value-of-program"
0 0 23 3 1 #" "
0 0 14 3 10 #"value-of/k"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 21 #"trace-apply-procedure"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 21 #"trace-apply-procedure"
0 0 23 3 2 #" ("
0 0 14 3 14 #"make-parameter"
0 0 23 3 1 #" "
0 0 20 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 49 #";;;;;;;;;;;;;;;; the interpreter ;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 39 #";; value-of-program : Program -> ExpVal"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 16 #"value-of-program"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 7 #"program"
0 0 23 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 9 #"a-program"
0 0 23 3 2 #" ("
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 10 #"value-of/k"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 2 #" ("
0 0 14 3 8 #"init-env"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"val"
0 0 23 3 2 #") "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 49 #"                                                ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"val"
0 0 23 3 3 #") ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 13 #"apply-handler"
0 0 23 3 1 #" "
0 0 19 3 21 #"\"uncaught exception!\""
0 0 23 3 8 #"))))))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 47 #";; value-of/k : Exp * Env * Cont -> FinalAnswer"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 12 #";; Page: 173"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"value-of/k"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 9 #"const-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"num"
0 0 23 3 3 #") ("
0 0 14 3 10 #"apply-cont"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 2 #" ("
0 0 14 3 7 #"num-val"
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 14 #"const-list-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"nums"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                        ("
0 0 14 3 10 #"apply-cont"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                    ("
0 0 14 3 8 #"list-val"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 7 #"num-val"
0 0 23 3 1 #" "
0 0 14 3 4 #"nums"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 7 #"var-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 3 #") ("
0 0 14 3 10 #"apply-cont"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"diff-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 10 #"value-of/k"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"val1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ("
0 0 14 3 10 #"value-of/k"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 29 1 #"\n"
0 0 23 3 51 #"                                                  ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"val2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 59
#"                                                          ("
0 0 14 3 10 #"apply-cont"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 2 #" ("
0 0 14 3 7 #"num-val"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 3 #") ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 57 #"                                                        ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                    ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"unop-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"unop"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 10 #"value-of/k"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                      (("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 3 #") ("
0 0 14 3 10 #"apply-unop"
0 0 23 3 1 #" "
0 0 14 3 4 #"unop"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 6 #"if-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 10 #"value-of/k"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                            ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 12 #"expval->bool"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 10 #"value-of/k"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 41 #"                                        ("
0 0 14 3 10 #"value-of/k"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                  ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"proc-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 10 #"apply-cont"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 8 #"proc-val"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 9 #"procedure"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"call-exp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 10 #"value-of/k"
0 0 23 3 1 #" "
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 4 #"cons"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"val1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 10 #"value-of/k"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 29 1 #"\n"
0 0 23 3 46 #"                                             ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"val2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 54 #"                                                     ("
0 0 14 3 15 #"apply-procedure"
0 0 23 3 2 #" ("
0 0 14 3 12 #"expval->proc"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 2 #") "
0 0 14 3 4 #"val2"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 3 #")) "
0 0 23 29 1 #"\n"
0 0 23 3 52 #"                                                   ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 17 3 58
#";; make let a macro, because I'm too lazy to add the extra"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 17 3 15 #";; continuation"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 7 #"let-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 10 #"value-of/k"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 8 #"call-exp"
0 0 23 3 2 #" ("
0 0 14 3 8 #"proc-exp"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 2 #") "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 14 3 3 #"env"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                  "
0 0 14 3 4 #"cont"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 10 #"letrec-exp"
0 0 23 3 2 #" ("
0 0 14 3 6 #"p-name"
0 0 23 3 1 #" "
0 0 14 3 5 #"b-var"
0 0 23 3 1 #" "
0 0 14 3 6 #"p-body"
0 0 23 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 10 #"value-of/k"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 14 3 11 #"letrec-body"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 14 #"extend-env-rec"
0 0 23 3 1 #" "
0 0 14 3 6 #"p-name"
0 0 23 3 1 #" "
0 0 14 3 5 #"b-var"
0 0 23 3 1 #" "
0 0 14 3 6 #"p-body"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                     "
0 0 14 3 4 #"cont"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 7 #"try-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 11 #"handler-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 10 #"value-of/k"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"val"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 10 #"apply-cont"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 10 #"value-of/k"
0 0 23 3 1 #" "
0 0 14 3 11 #"handler-exp"
0 0 23 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 44 #"                                            "
0 0 14 3 4 #"cont"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 9 #"raise-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 10 #"value-of/k"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 40 #"                                       ("
0 0 14 3 13 #"apply-handler"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                     ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"apply-cont"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cont"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      (("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 2 #") "
0 0 14 3 3 #"val"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"apply-handler"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cont"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      (("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 2 #") "
0 0 14 3 3 #"val"
0 0 23 3 4 #"))) "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 62
#";; apply-procedure : procedure * expval * cont -> final-expval"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"apply-procedure"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 5 #"proc1"
0 0 23 3 1 #" "
0 0 14 3 3 #"arg"
0 0 23 3 1 #" "
0 0 14 3 4 #"cont"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 5 #"proc1"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 9 #"procedure"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 10 #"value-of/k"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 10 #"extend-env"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 3 #"arg"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 14 3 4 #"cont"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"apply-unop"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"unop"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 8 #"unary-op"
0 0 23 3 1 #" "
0 0 14 3 4 #"unop"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 10 #"null?-unop"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 8 #"bool-val"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 5 #"null?"
0 0 23 3 2 #" ("
0 0 14 3 12 #"expval->list"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"car-unop"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 3 #"car"
0 0 23 3 2 #" ("
0 0 14 3 12 #"expval->list"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 8 #"cdr-unop"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 8 #"list-val"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 2 #" ("
0 0 14 3 12 #"expval->list"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 10 #"zero?-unop"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 8 #"bool-val"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 5 #"zero?"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 29 #";; to get the detailed trace:"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 46 #";; (trace value-of/k apply-cont apply-handler)"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 16 #"value-of-program"
0 0 23 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 23 3 1 #" "
0 0 19 3 32 #"\"try -(1, raise 44) catch (m) m\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  )"
0 0 23 29 1 #"\n"
0           0
