#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 561 0 23 3 1 #"("
0 0 15 3 6 #"module"
0 0 23 3 1 #" "
0 0 14 3 4 #"lang"
0 0 23 3 2 #" ("
0 0 14 3 3 #"lib"
0 0 23 3 1 #" "
0 0 19 3 9 #"\"eopl.ss\""
0 0 23 3 1 #" "
0 0 19 3 6 #"\"eopl\""
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 19 3 16 #"\"predicates.rkt\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 19 3 10 #"\"lang.rkt\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 19 3 17 #"\"unification.rkt\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 19 3 16 #"\"call-stack.rkt\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 19 3 9 #"\"exp.rkt\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"provide"
0 0 23 3 1 #" "
0 0 14 3 15 #"process-program"
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"group-clauses"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cls"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"for-each"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"cl"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"clause"
0 0 23 3 1 #" "
0 0 14 3 2 #"cl"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 8 #"a-clause"
0 0 23 3 2 #" ("
0 0 14 3 4 #"head"
0 0 23 3 1 #" "
0 0 14 3 5 #"terms"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 4 #"term"
0 0 23 3 1 #" "
0 0 14 3 4 #"head"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 6 #"a-term"
0 0 23 3 2 #" ("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 4 #"args"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 15 #"register-clause"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 4 #"args"
0 0 23 3 1 #" "
0 0 14 3 5 #"terms"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 19 #"invalid-clause-head"
0 0 23 3 1 #" "
0 0 14 3 4 #"head"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"       "
0 0 14 3 3 #"cls"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"process-program"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 4 #"prog"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 21 #"initialize-predicates"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 22 #"initialize-unification"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 7 #"program"
0 0 23 3 1 #" "
0 0 14 3 4 #"prog"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 9 #"a-program"
0 0 23 3 2 #" ("
0 0 14 3 10 #"term-query"
0 0 23 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 13 #"group-clauses"
0 0 23 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 4 #"term"
0 0 23 3 1 #" "
0 0 14 3 10 #"term-query"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 6 #"a-term"
0 0 23 3 2 #" ("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 4 #"args"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 3 #"env"
0 0 23 3 2 #" ("
0 0 14 3 13 #"make-init-env"
0 0 23 3 1 #" "
0 0 14 3 4 #"args"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 7 #"process"
0 0 23 3 1 #" "
0 0 14 3 10 #"term-query"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 10 #"print-unif"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 17 3 2 #";("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 4 #"env)"
0 0 23 29 1 #"\n"
0 0 23 3 32 #"                               ("
0 0 14 3 13 #"resolve-query"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 13 #"invalid-query"
0 0 23 3 1 #" "
0 0 14 3 10 #"term-query"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                     )))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"call"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 7 #"old-env"
0 0 23 3 1 #" "
0 0 14 3 6 #"values"
0 0 23 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 4 #"args"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 7 #"clauses"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 7 #"new-env"
0 0 23 3 2 #" ("
0 0 14 3 10 #"unify-call"
0 0 23 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 23 3 1 #" "
0 0 14 3 4 #"args"
0 0 23 3 1 #" "
0 0 14 3 6 #"values"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 15 #"process-clauses"
0 0 23 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 23 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"         "
0 0 14 3 7 #"old-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"process-clauses"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 7 #"clauses"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 14 3 3 #"env"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 15 #"process-clauses"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 23 3 3 #") ("
0 0 14 3 7 #"process"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 7 #"clauses"
0 0 23 3 2 #") "
0 0 14 3 3 #"env"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 7 #"process"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"t"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 6 #"result"
0 0 23 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 4 #"term"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 6 #"a-term"
0 0 23 3 2 #" ("
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 4 #"args"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 4 #"call"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 4 #"args"
0 0 23 3 2 #" ("
0 0 14 3 14 #"call-predicate"
0 0 23 3 1 #" "
0 0 14 3 2 #"id"
0 0 23 3 1 #" "
0 0 14 3 4 #"args"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 10 #"a-variable"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 2 #") "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 13 #"a-unification"
0 0 23 3 2 #" ("
0 0 14 3 2 #"t1"
0 0 23 3 1 #" "
0 0 14 3 2 #"t2"
0 0 23 3 3 #") ("
0 0 14 3 5 #"unify"
0 0 23 3 2 #" ("
0 0 14 3 7 #"get-var"
0 0 23 3 1 #" "
0 0 14 3 2 #"t1"
0 0 23 3 2 #") "
0 0 14 3 2 #"t2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 12 #"a-assignment"
0 0 23 3 2 #" ("
0 0 14 3 2 #"t1"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 3 #") ("
0 0 15 3 4 #"let*"
0 0 23 3 3 #" (("
0 0 14 3 3 #"var"
0 0 23 3 2 #" ("
0 0 14 3 7 #"get-var"
0 0 23 3 1 #" "
0 0 14 3 2 #"t1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ("
0 0 14 3 1 #"e"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ("
0 0 14 3 1 #"h"
0 0 23 3 2 #" ("
0 0 14 3 5 #"unify"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 2 #" ("
0 0 14 3 5 #"value"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 5 #")))) "
0 0 14 3 1 #"h"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 9 #"a-literal"
0 0 23 3 2 #" ("
0 0 14 3 3 #"num"
0 0 23 3 2 #") "
0 0 14 3 3 #"env"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"retype"
0 0 23 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 4 #"fail"
0 0 23 3 2 #" ("
0 0 14 3 6 #"string"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 10 #"new-clause"
0 0 23 3 2 #" ("
0 0 14 3 9 #"call-next"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 7 #"display"
0 0 23 3 1 #" "
0 0 14 3 10 #"new-clause"
0 0 23 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 4 #"call"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 10 #"new-clause"
0 0 23 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 23 3 1 #" "
0 0 14 3 10 #"new-clause"
0 0 23 3 3 #") ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 10 #"new-clause"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 15 #"process-program"
0 0 23 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 23 3 1 #" "
0 0 19 3 58
#"\"test($z) ? test($z) :- is($z, 4); is($z, 3). test(4) :-.\""
0 0 23 3 4 #"  ))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 15 #"process-program"
0 0 23 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 23 3 1 #" "
0 0 19 3 63
#"\"pow(10, 1, $z) ? pow(1, 1) :- . pow($y, $z) :- pow(is($z, *(.\""
0 0 23 3 4 #"  ))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 15 #"process-program"
0 0 23 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 23 3 1 #" "
0 0 19 3 50 #"\"test(3, $z, $y) ? test($z, $y, 1) :- is($y, $z).\""
0 0 23 3 4 #"  ))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 15 #"process-program"
0 0 23 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 23 3 1 #" "
0 0 19 3 68
(
 #"\"test(3, $z, $y, $k) ? test($z, $y, 1, $r) :- is($y, $z); t($r). t("
 #"5"
) 0 0 19 3 1 #")"
0 0 19 3 5 #" :-.\""
0 0 23 3 4 #"  ))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 15 #"process-program"
0 0 23 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 23 3 1 #" "
0 0 19 3 86
(
 #"\"test(3, $z, $y, $k) ? test($z, $y, 1, $r) :- is($y, $z); t($a); is"
 #"($r, $a). t(5) :-.\""
) 0 0 23 3 4 #"  ))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  )"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0           0
